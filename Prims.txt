#include <iostream>
#include <climits>
using namespace std;
#define MAX 100
// Function to find the Minimum Spanning Tree (MST) using Prim's Algorithm
void primMST(int graph[MAX][MAX], int V) {
int parent[V]; // Array to store the MST (parent of each node)
int key[V]; // Key values used to pick the minimum weight edge
bool inMST[V]; // To keep track of vertices included in the MST
// Initialize all keys as INFINITE and inMST as false
for (int i = 0; i < V; i++) {
key[i] = INT_MAX;
inMST[i] = false;
}
// Start from the first vertex
key[0] = 0; // Set key of the first vertex to 0
parent[0] = -1; // First node is always the root of MST
// Loop to find V-1 edges of the MST
for (int count = 0; count < V - 1; count++) {
// Find the vertex with the minimum key value not yet included in MST
int minKey = INT_MAX, u;
for (int v = 0; v < V; v++) {
if (!inMST[v] && key[v] < minKey) {
minKey = key[v];
u = v;
}
}
// Include the selected vertex in MST
inMST[u] = true;
// Update key and parent for adjacent vertices of the selected vertex
for (int v = 0; v < V; v++) {
// Update the key only if graph[u][v] is smaller and v is not in MST
if (graph[u][v] && !inMST[v] && graph[u][v] < key[v]) {
parent[v] = u;
key[v] = graph[u][v];
}
}
}
// Display the MST and calculate total cost
int mstCost = 0;
cout << "Edges in the Minimum Spanning Tree:\n";
for (int i = 1; i < V; i++) {
cout << "Office " << parent[i] << " - Office " << i << " : Cost = " << graph[i][parent[i]] << endl;
mstCost += graph[i][parent[i]];
}
cout << "Total minimum cost to connect all offices: " << mstCost << endl;
}
int main() {
int V, E;
// Input number of vertices (offices)
cout << "Enter number of offices (vertices): ";
cin >> V;
int graph[MAX][MAX] = {0}; // Adjacency matrix representation of the graph
// Input number of edges (connections)
cout << "Enter number of connections (edges): ";
cin >> E;
// Input edges with their weights
cout << "Enter each connection as: source destination cost\n";
for (int i = 0; i < E; i++) {
int src, dest, weight;
cin >> src >> dest >> weight;
graph[src][dest] = weight; // Set weight for the edge (src, dest)
graph[dest][src] = weight; // Since the graph is undirected
}
// Call Prim's Algorithm to find MST
primMST(graph, V);
return 0;
