#include <iostream>
#include <string>
#include <cstdlib> // For rand()
#include <ctime>   // For time()
#include <iomanip> // For std::hex and std::setfill
#include <sstream> // For std::stringstream
using namespace std;

class Employee {
public:
    int id;
    string name;
    string hashedPassword;

    Employee(int i = -1, string n = "", string hp = "") : id(i), name(n), hashedPassword(hp) {}
};

// Simple hash function (not secure, just for demonstration)
string hashPassword(const string& password) {
    // Simple hash: sum of ASCII values mod 256
    unsigned int hash = 0;
    for (char ch : password) {
        hash += static_cast<unsigned int>(ch);
    }
    stringstream ss;
    ss << hex << setfill('0') << setw(2) << hash % 256; // Simplified hashing
    return ss.str();
}

class HashTable {
private:
    Employee* table;
    int size;

    int hashFunction(int key) {
        return key % size;
    }

public:
    HashTable(int s) : size(s) {
        table = new Employee[size];
        for (int i = 0; i < size; i++) {
            table[i] = Employee();
        }
    }

    ~HashTable() {
        delete[] table;
    }

    void insert(int id, string name, string password) {
        string hashedPassword = hashPassword(password);
        int hashIndex = hashFunction(id);
        int i = 0;

        // Linear probing
        while (table[hashIndex].id != -1) {
            hashIndex = (hashIndex + 1) % size;
            if (++i == size) {
                cout << "Hash table is full" << endl;
                return;
            }
        }
        table[hashIndex] = Employee(id, name, hashedPassword);
        cout << "Inserted " << name << " at index " << hashIndex << endl;
    }

    Employee* search(int id, const string& password) {
        int hashIndex = hashFunction(id);
        int i = 0;

        // Linear probing
        while (table[hashIndex].id != -1) {
            if (table[hashIndex].id == id) {
                if (table[hashIndex].hashedPassword == hashPassword(password)) {
                    return &table[hashIndex];
                } else {
                    cout << "Password incorrect for user ID " << id << endl;
                    return nullptr;
                }
            }
            hashIndex = (hashIndex + 1) % size;
            if (++i == size)
                break;
        }
        return nullptr;
    }

    void display() {
        for (int i = 0; i < size; i++) {
            if (table[i].id != -1) {
                cout << "Index " << i << ": " << table[i].id << " - " << table[i].name << endl;
            } else {
                cout << "Index " << i << ": Empty" << endl;
            }
        }
    }
};

int main() {
    HashTable ht(10);
    int choice;

    do {
        cout << "Menu:\n";
        cout << "1. Add Employee\n";
        cout << "2. Authenticate Employee\n";
        cout << "3. Display Employees\n";
        cout << "0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                int id;
                string name, password;
                cout << "Enter Employee ID: ";
                cin >> id;
                cout << "Enter Employee Name: ";
                cin >> name;
                cout << "Enter Password: ";
                cin >> password;
                ht.insert(id, name, password);
                break;
            }
            case 2: {
                int id;
                string password;
                cout << "Enter Employee ID: ";
                cin >> id;
                cout << "Enter Password: ";
                cin >> password;
                Employee* emp = ht.search(id, password);
                if (emp != nullptr) {
                    cout << "Authenticated employee: " << emp->name << endl;
                } else {
                    cout << "Authentication failed." << endl;
                }
                break;
            }
            case 3: {
                ht.display();
                break;
            }
            case 0: {
                cout << "Exiting the program." << endl;
                break;
            }
            default: {
                cout << "Invalid choice! Please try again." << endl;
                break;
            }
        }
        cout << endl;
    } while (choice != 0);

    return 0;
}
