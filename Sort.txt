#include <iostream>
#include <cstring> // For strcpy
using namespace std;

// Product class to represent a product with name, price, and popularity
class Product {
public:
    char name[50]; // Array to store the name of the product
    float price;
    int popularity;

    // Constructor to initialize product details with provided values
    Product(const char* n, float p, int pop) {
        strcpy(name, n); // Use strcpy to copy the name
        price = p;
        popularity = pop;
    }

    // Default constructor to create an uninitialized product
    Product() {
        strcpy(name, ""); // Set a default name
        price = 0.0;
        popularity = 0;
    }

    // Display function to print product details
    void display() const {
        cout << name << " (Price: " << price << ", Popularity: " << popularity << ")" << endl;
    }
};

// Quick Sort for sorting by price
int partition(Product products[], int low, int high) {
    float pivot = products[high].price;
    int i = low - 1;
    for (int j = low; j <= high - 1; j++) {
        if (products[j].price <= pivot) {
            i++;
            swap(products[i], products[j]);
        }
    }
    swap(products[i + 1], products[high]);
    return (i + 1);
}

void quickSort(Product products[], int low, int high) {
    if (low < high) {
        int pi = partition(products, low, high);
        quickSort(products, low, pi - 1);
        quickSort(products, pi + 1, high);
    }
}

// Merge Sort for sorting by price
void merge(Product products[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        merge(products, left, mid);
        merge(products, mid + 1, right);
        int n1 = mid - left + 1;
        int n2 = right - mid;
        Product leftArr[n1], rightArr[n2];
        for (int i = 0; i < n1; i++) leftArr[i] = products[left + i];
        for (int i = 0; i < n2; i++) rightArr[i] = products[mid + 1 + i];
        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i].price <= rightArr[j].price) {
                products[k] = leftArr[i];
                i++;
            } else {
                products[k] = rightArr[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            products[k] = leftArr[i];
            i++;
            k++;
        }
        while (j < n2) {
            products[k] = rightArr[j];
            j++;
            k++;
        }
    }
}

void mergeSort(Product products[], int left, int right) {
    merge(products, left, right);
}

// Insertion Sort for sorting by popularity
void insertionSortByPopularity(Product products[], int n) {
    for (int i = 1; i < n; i++) {
        Product key = products[i];
        int j = i - 1;
        while (j >= 0 && products[j].popularity > key.popularity) {
            products[j + 1] = products[j];
            j = j - 1;
        }
        products[j + 1] = key;
    }
}

// Selection Sort for sorting by popularity
void selectionSortByPopularity(Product products[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIdx = i;
        for (int j = i + 1; j < n; j++) {
            if (products[j].popularity < products[minIdx].popularity) {
                minIdx = j;
            }
        }
        swap(products[i], products[minIdx]);
    }
}

void displayProducts(Product products[], int n) {
    for (int i = 0; i < n; i++) {
        products[i].display();
    }
}

int main() {
    const int MAX_PRODUCTS = 100;
    Product products[MAX_PRODUCTS];
    int n = 0;
    int choice;

    do {
        cout << "Menu:\n";
        cout << "1. Add a Product\n";
        cout << "2. Sort Products by Price (Quick Sort)\n";
        cout << "3. Sort Products by Price (Merge Sort)\n";
        cout << "4. Sort Products by Popularity (Insertion Sort)\n";
        cout << "5. Sort Products by Popularity (Selection Sort)\n";
        cout << "6. Display Products\n";
        cout << "0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                if (n < MAX_PRODUCTS) {
                    char name[50];
                    float price;
                    int popularity;
                    cout << "Enter product name: ";
                    cin >> name;
                    cout << "Enter product price: ";
                    cin >> price;
                    do {
                        cout << "Enter product popularity (1-10): ";
                        cin >> popularity;
                        if (popularity < 1 || popularity > 10) {
                            cout << "Invalid popularity! Please enter a value between 1 and 10." << endl;
                        }
                    } while (popularity < 1 || popularity > 10);
                    products[n++] = Product(name, price, popularity);
                } else {
                    cout << "Product list is full!" << endl;
                }
                break;
            }
            case 2: {
                quickSort(products, 0, n - 1);
                cout << "Products sorted by Price (Quick Sort):\n";
                displayProducts(products, n);
                break;
            }
            case 3: {
                mergeSort(products, 0, n - 1);
                cout << "Products sorted by Price (Merge Sort):\n";
                displayProducts(products, n);
                break;
            }
            case 4: {
                insertionSortByPopularity(products, n);
                cout << "Products sorted by Popularity (Insertion Sort):\n";
                displayProducts(products, n);
                break;
            }
            case 5: {
                selectionSortByPopularity(products, n);
                cout << "Products sorted by Popularity (Selection Sort):\n";
                displayProducts(products, n);
                break;
            }
            case 6: {
                cout << "Current Products:\n";
                displayProducts(products, n);
                break;
            }
            case 0: {
                cout << "Exiting the program." << endl;
                break;
            }
            default: {
                cout << "Invalid choice! Please try again." << endl;
                break;
            }
        }
        cout << endl;
    } while (choice != 0);

    return 0;
}
